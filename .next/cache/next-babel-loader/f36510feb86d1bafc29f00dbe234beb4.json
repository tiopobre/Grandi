{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\n\nconst useValidacion = (stateInicial, validar, fn) => {\n  const {\n    0: valores,\n    1: setValores\n  } = useState(stateInicial);\n  const {\n    0: errores,\n    1: setErrores\n  } = useState({});\n  const {\n    0: submitForm,\n    1: setSubmitForm\n  } = useState(false); // Funcion que escucha \n\n  useEffect(() => {\n    if (submitForm) {\n      const noErrores = Object.keys(errores).length === 0;\n\n      if (noErrores) {\n        fn(); //Funcion que se ejecuta en el componente dependiendo del formulario\n      }\n\n      setSubmitForm(false);\n    }\n  }, [errores]); // Funcion que se ejecuta cuando el usuraio escribe\n\n  const handleChange = e => {\n    console.log('state', valores);\n    setValores(_objectSpread({}, valores, {\n      [e.target.name]: e.target.value\n    }));\n    console.log('cambio state', valores);\n  }; // Funcion que se ejecuta con el submit\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const erroresValidacion = validar(valores);\n    setErrores(erroresValidacion);\n    setSubmitForm(true);\n  };\n\n  return {\n    valores,\n    errores,\n    handleChange,\n    handleSubmit\n  };\n};\n\nexport default useValidacion;","map":{"version":3,"sources":["D:/Curso React/Tests/Next_test/hooks/useValidacion.jsx"],"names":["React","useState","useEffect","useValidacion","stateInicial","validar","fn","valores","setValores","errores","setErrores","submitForm","setSubmitForm","noErrores","Object","keys","length","handleChange","e","console","log","target","name","value","handleSubmit","preventDefault","erroresValidacion"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,aAAa,GAAG,CAACC,YAAD,EAAeC,OAAf,EAAwBC,EAAxB,KAA+B;AAEjD,QAAM;AAAA,OAACC,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAACG,YAAD,CAAtC;AACA,QAAM;AAAA,OAACK,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAA,OAACU,UAAD;AAAA,OAAaC;AAAb,MAA8BX,QAAQ,CAAC,KAAD,CAA5C,CAJiD,CAKjD;;AACAC,EAAAA,SAAS,CAAC,MAAK;AACX,QAAGS,UAAH,EAAc;AACV,YAAME,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYN,OAAZ,EAAqBO,MAArB,KAA+B,CAAjD;;AACA,UAAGH,SAAH,EAAa;AACTP,QAAAA,EAAE,GADO,CACH;AACT;;AACDM,MAAAA,aAAa,CAAE,KAAF,CAAb;AACH;AACJ,GARQ,EAQN,CAACH,OAAD,CARM,CAAT,CANiD,CAejD;;AACA,QAAMQ,YAAY,GAAEC,CAAC,IAAG;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBb,OAArB;AACAC,IAAAA,UAAU,mBACHD,OADG;AAEN,OAACW,CAAC,CAACG,MAAF,CAASC,IAAV,GAAkBJ,CAAC,CAACG,MAAF,CAASE;AAFrB,OAAV;AAIAJ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4Bb,OAA5B;AACH,GAPD,CAhBiD,CAwBjD;;;AACA,QAAMiB,YAAY,GAAGN,CAAC,IAAI;AACtBA,IAAAA,CAAC,CAACO,cAAF;AACA,UAAMC,iBAAiB,GAAGrB,OAAO,CAACE,OAAD,CAAjC;AACAG,IAAAA,UAAU,CAACgB,iBAAD,CAAV;AACAd,IAAAA,aAAa,CAAC,IAAD,CAAb;AACH,GALD;;AAOA,SAAO;AACHL,IAAAA,OADG;AAEHE,IAAAA,OAFG;AAGHQ,IAAAA,YAHG;AAIHO,IAAAA;AAJG,GAAP;AAMH,CAtCD;;AAwCA,eAAerB,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst useValidacion = (stateInicial, validar, fn) => {\r\n    \r\n    const [valores, setValores] = useState(stateInicial)\r\n    const [errores, setErrores] = useState({});\r\n    const [submitForm, setSubmitForm] = useState(false);\r\n    // Funcion que escucha \r\n    useEffect(() =>{\r\n        if(submitForm){\r\n            const noErrores = Object.keys(errores).length ===0;\r\n            if(noErrores){\r\n                fn(); //Funcion que se ejecuta en el componente dependiendo del formulario\r\n            }\r\n            setSubmitForm (false);\r\n        }\r\n    }, [errores]);\r\n    // Funcion que se ejecuta cuando el usuraio escribe\r\n    const handleChange= e =>{\r\n        console.log('state', valores)\r\n        setValores({\r\n            ...valores,\r\n            [e.target.name] : e.target.value\r\n        })\r\n        console.log('cambio state', valores)\r\n    }\r\n    // Funcion que se ejecuta con el submit\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        const erroresValidacion = validar(valores)\r\n        setErrores(erroresValidacion);\r\n        setSubmitForm(true);\r\n    }\r\n\r\n    return {\r\n        valores,\r\n        errores,\r\n        handleChange,\r\n        handleSubmit,\r\n    };\r\n}\r\n \r\nexport default useValidacion;"]},"metadata":{},"sourceType":"module"}